# -----------------------------------------------------文档测试-----------------------------------------------------#
class Dict(dict):
    '''
    Simple dict but also support access as x.y style.
    >>> d1 = Dict()
    >>> d1['x'] = 100
    >>> d1.x
    100
    >>> d1.y = 200
    >>> d1['y']
    200
    >>> d2 = Dict(a=1, b=2, c='3')
    >>> d2.c
    '3'
    >>> d2['empty']
    Traceback (most recent call last):
        ...
    KeyError: 'empty'
    >>> d2.empty
    Traceback (most recent call last):
        ...
    AttributeError: 'Dict' object has no attribute 'empty'
    '''

    def __init__(self, **kw):
        super(Dict, self).__init__(**kw)

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Dict' object has no attribute '%s'" % key)

    def __setattr__(self, key, value):
        self[key] = value


# Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。
# doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用...表示中间一大段烦人的输出。
if __name__ == '__main__':
    import doctest

    doctest.testmod()


# 练习：对函数fact(n)编写doctest并执行：
def fact(n):
    '''
    Calculate 1*2*...*n

    >>> fact(1)
    1
    >>> fact(10)   #运行一下把Got里边的结果写到这里
    3628800
    >>> fact(-1)   #把Got里边的出错信息写到这里，注意中间的部分可以用...代替
    Traceback (most recent call last):
      ... #版本1中的出错信息可以用...代替
    ValueError
    '''
    if n < 1:
        raise ValueError()  # 当fact()参数值<1 就会抛出ValueError错误
    if n == 1:
        return 1
    return n * fact(n - 1)  # 递归调用


if __name__ == '__main__':
    import doctest

    doctest.testmod()  # 出错时信息比较简单 便于修改
    # doctest.testmod(verbose=True)#doctest.testmod是测试模块 verbose默认是False 意思是只有出错时才有错误提示，设成True就都会进行提示
