# -------------------------------------------------collections库----------------------------------------------------#
# 一、namedtuple
# namedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素。
from collections import namedtuple

Point = namedtuple("Point", ["x", "y"])
p = Point(1, 4)
print(p.x)
print(p.y)

# 可以验证创建的Point对象是tuple的一种子类：
print(isinstance(p, Point))
print(isinstance(p, tuple))

# 类似的，如果要用坐标和半径表示一个圆，也可以用namedtuple定义：
Circle = namedtuple("Circle", ["x", "y", "r"])
q = Circle(3, 5, 4)
print(q.x)
print(q.y)
print(q.r)

# 二、deque
# 使用list存储数据时，按索引访问元素很快，但是插入和删除元素就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低。
# deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈：
from collections import deque

q = deque(["a", "b", "c"])
q.append("x")
# deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素。
q.appendleft("y")
print(q)

# 三、defaultdict
# 使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict：
from collections import defaultdict

# 注意默认值是调用函数返回的，而函数在创建defaultdict对象时传入。除了在Key不存在时返回默认值，defaultdict的其他行为跟dict是完全一样的。
dd = defaultdict(lambda: "N/A")
dd["key1"] = "abc"
print(dd["key1"])
print(dd["key2"])

# 四、OrderedDict
# 使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。如果要保持Key的顺序，可以用OrderedDict：
from collections import OrderedDict

d = dict([("c", 1), ("a", 3), ("b", 2)])
od = OrderedDict([("c", 1), ("a", 3), ("b", 2)])
print(d, od, sep="\n")
# 注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：
oc = OrderedDict()
oc["z"] = 1
oc["y"] = 2
oc["x"] = 3
print(list(oc.keys()))


# 注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：
class LastUpdatedOrderedDict(OrderedDict):

    def __init__(self, capacity):
        super(LastUpdatedOrderedDict, self).__init__()
        self._capacity = capacity

    def __setitem__(self, key, value):
        containsKey = 1 if key in self else 0
        if len(self) - containsKey >= self._capacity:
            last = self.popitem(last=False)
            print('remove:', last)
        if containsKey:
            del self[key]
            print('set:', (key, value))
        else:
            print('add:', (key, value))
        OrderedDict.__setitem__(self, key, value)


sc = LastUpdatedOrderedDict(3)
# 插入值到dict
sc.__setitem__("a", 4)
sc.__setitem__("b", 6)
sc.__setitem__("c", 7)
sc.__setitem__("d", 6)
print(sc)

# 五、ChainMap
# ChainMap可以把一组dict串起来并组成一个逻辑上的dict。ChainMap本身也是一个dict，但是查找的时候，会按照顺序在内部的dict依次查找。
# importing collections for ChainMap operations
import collections

# initializing dictionaries
dic1 = {'a': 1, 'b': 2}
dic2 = {'b': 3, 'c': 4}

# initializing ChainMap
chain = collections.ChainMap(dic1, dic2)

# printing chainMap using maps
print("All the ChainMap contents are : ")
print(chain.maps)

# printing keys using keys()
print("All keys of ChainMap are : ")
print(list(chain.keys()))

# printing keys using keys()
print("All values of ChainMap are : ")
print(list(chain.values()))

# 六、Counter
# Counter是一个简单的计数器，例如，统计字符出现的个数：
from collections import Counter
c = Counter()
for ch in 'programming':
    c[ch] = c[ch] + 1
print(c)
c.update("hello")
# Counter实际上也是dict的一个子类，上面的结果可以看出每个字符出现的次数。
print(c)
