注：由于abs函数实际上是定义在import builtins模块中的，所以要让修改abs变量的指向在其它模块也生效，要用import builtins; builtins.abs = 10。

一、函数作为返回值：
我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：
def calc_sum(*args):
    ax = 0
    for n in args:
        ax = ax + n
    return ax
但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum
当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：
>>> f = lazy_sum(1, 3, 5, 7, 9)
>>> f
<function lazy_sum.<locals>.sum at 0x101c6ed90>
调用函数f时，才真正计算求和的结果：

>>> f()
25
在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包
（Closure）”的程序结构拥有极大的威力。请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：
>>> f1 = lazy_sum(1, 3, 5, 7, 9)
>>> f2 = lazy_sum(1, 3, 5, 7, 9)
>>> f1==f2
False
f1()和f2()的调用结果互不影响。


二、闭包
# 闭包：当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，此时成为闭包。
# 例子：
def count():
    fs = []
    for i in range(1, 4):
        def f():
            return i * i

        fs.append(f)
    return fs


f1, f2, f3 = count()
# 在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所
# 引用的变量i已经变成了3，因此最终结果均为9。
print(f1(), f2(), f3())
# 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。

# 如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：
# 方法一：输出整个list
def count1():
    def f1(j):
        return j * j

    fs1 = []
    for i in range(1, 4):
        fs1.append(f1(i))
    return fs1


print(count1())


# 方法二：依次输出每个元素
def count2():
    def f2(j):
        def g():
            return j * j

        return g

    fs2 = []
    for i in range(1, 4):
        fs2.append(f2(i))
    return fs2


f4, f5, f6 = count2()
print(f4(), f5(), f6())


# ----------------------------------------------------nonlocal--------------------------------------------------#
# 使用闭包，就是内层函数引用了外层函数的局部变量。如果只是读外层变量的值，我们会发现返回的闭包函数调用一切正常：
def inc():
    x = 0

    def fn5():
        # 仅读取x的值:
        return x + 1

    return fn5


f7 = inc()
print(f7())  # 1
print(f7())  # 1


# 但是，如果对外层变量赋值，由于Python解释器会把x当作函数fn()的局部变量，它会报错。所以使用闭包时，对外层变量赋值前，需要先使用nonlocal声明该变量
# 不是当前函数的局部变量。
def inc1():
    x = 0

    def fn6():
        nonlocal x
        x = x + 1
        return x

    return fn6


f8 = inc()
print(f8())
print(f8())
print(f8())
