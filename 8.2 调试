# ----------------------------------------------------调试-------------------------------------------------------#
# 一、断言
# 凡是用print()来辅助查看的地方，都可以用断言（assert）来替代：

# def foo4(s):
#     n = int(s)
#     assert n != 0, 'n is zero!'
#     return 10 / n


# def main4():
    # foo('0')


# assert的意思是，表达式n != 0应该是True，否则，根据程序运行的逻辑，后面的代码肯定会出错。
# 如果断言失败，assert语句本身就会抛出AssertionError：

# 程序中如果到处充斥着assert，和print()相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：

# $ python -O err.py
# 注意：断言的开关“-O”是英文大写字母O，不是数字0。关闭后，你可以把所有的assert语句当成pass来看。

# 三、logging
# 把print()替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：

# import logging
#
# s = '0'
# n = int(s)
# logging.info('n = %d' % n)
# print(10 / n)
# logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？别急，在import logging之后添加一行配置再试试：

# import logging

# logging.basicConfig(level=logging.INFO)

# 这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作
# 用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。
# logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。

# 三、pdb.set_trace()
# 这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点：

# import pdb
# 
# s = '0'
# n = int(s)
# pdb.set_trace()  # 运行到这里会自动暂停
# print(10 / n)
# 运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：
# 虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。
